// ! 오늘 얻은 인사이트
//? 1. 이벤트 위임을 어떻게 할 수 있는지 알게되어 좋았다.
//? 2. 요구사항을 전략적으로 접근해야되는지, 단계별로 세세하게 나누는 것이 중요하다
//? 3. DOM 요소를 가져올 때 $표시로 변수처럼 사용 할 수 있어서 좋았다.
//? 4. contains, closest, textContent, insertAdjacentHtml, e.target

//! step1 목표
//  - [x] 메뉴의 이름을 입력 받고 엔터키 입력으로 추가한다
//  - [x] 메뉴의 이름을 입력 받고 확인 버튼을 클릭하면 메뉴를 추가한다.
//  - [x] 추가되는 메뉴의 마크업은 `<ul id="espresso-menu-list" class="mt-3 pl-0"></ul>` 안에 삽입해야 한다.
//  - [x] 총 메뉴 갯수를 count하여 상단에 보여준다.
//  - [x] 메뉴가 추가되고 나면, input은 빈 값으로 초기화한다.
//  - [x] 사용자 입력값이 빈 값이라면 추가되지 않는다.

// 메뉴 수정 TODO
// - [x] 메뉴의 수정 버튼 클릭 이벤트를 받고, 메뉴 수정하는 모달창이 뜬다.
// - [x] 모달창에서 신규메뉴명을 입력 받고, 확인버튼을 누르면 메뉴가 수정된다.

// 메뉴 삭제 TODO
// - [x] 메뉴 삭제 버튼 클릭 이벤트를 받고, 메뉴 삭제 컨펌 모달창이 뜬다.
// - [x] 확인 버튼을 끌릭하면 메뉴가 삭제된다.
// - [x] 총 메뉴 갯수를 count하여 상단에 보여준다.

//! 코드 주석 구분
// todo 내 방법 - 클래스 이름으로 찾는 방법
// const btn = e.target.className.split(" ").at(-1);
// if (btn === "menu-edit-button") {
//   console.log("수정버튼");
// } else if (btn === "menu-remove-button") {
//   console.log("제거버튼");
// }

// todo 내 방법 - 텍스트로 찾는방법
// if (e.target.textContent === "수정") {
//   console.log("수정버튼");
// } else if (e.target.textContent === "삭제") {
//   console.log("삭제버튼");
// }

// todo 내 방법 - 텍스트로 찾는방법
// 부모 요소에서 자식요소로 접근하여 길이를 구하고 있다.
//   const menuCount = $("#espresso-menu-list").querySelectorAll("li").length;

// innerText와 textContent 차이점 style과 리플로우 발생. innerText는 좋지않다.
//   $(".menu-count").innerText = `총 ${menuCount}개`;

//   나의 솔루션
//   $(".menu-count").textContent = `총 ${_$(".menu-list-item").length}개`;

//   $("#espresso-menu-name").value = "";

// const menuItemTemplate = (espressoMenuName) => {
//   return `<li class="menu-list-item d-flex items-center py-2">
//               <span class="w-100 pl-2 menu-name">${espressoMenuName}</span>
//               <button
//                 type="button"
//                 class="bg-gray-50 text-gray-500 text-sm mr-1 menu-edit-button"
//               >
//                 수정
//               </button>
//               <button
//                 type="button"
//                 class="bg-gray-50 text-gray-500 text-sm menu-remove-button"
//               >
//                 삭제
//               </button>
//             </li>`;
// };

// ulTag.insertAdjacentHTML("beforeend", menuItemTemplate(inputTag.value));


const subStore = {
  setSubLocalStorage(key, value) {
    localStorage.setItem(key, JSON.stringify(value));
  },
  getSubLocalStorage(key) {
    return JSON.parse(localStorage.getItem(key));
  },
};

  this.subInit = (key) => {
    // 로컬스토리지에 저장된 값을 찾는다.
    if (subStore.getSubLocalStorage().length >= 1) {
      // 결과값을 menu에 할당한다.
      this.menu = subStore.getSubLocalStorage(key);
    }

    // 렌더 함수를 호출하여 렌더링을 진행한다.
    render();
    console.log("init이 호출되었는가??");
  };